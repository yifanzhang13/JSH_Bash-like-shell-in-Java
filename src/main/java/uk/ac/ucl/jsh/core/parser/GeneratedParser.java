
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package uk.ac.ucl.jsh.core.parser;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GeneratedParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GeneratedParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GeneratedParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeneratedParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\003\005\000\002\003\003" +
    "\000\002\005\005\000\002\005\002\000\002\012\004\000" +
    "\002\012\002\000\002\011\004\000\002\011\002\000\002" +
    "\010\003\000\002\010\003\000\002\013\004\000\002\013" +
    "\004\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\026\002\ufffa\004\ufffa\005\ufffa\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002" +
    "\000\004\002\036\001\002\000\020\006\026\007\025\010" +
    "\015\011\022\012\017\013\020\014\024\001\002\000\006" +
    "\002\001\004\013\001\002\000\010\002\ufffe\004\ufffe\005" +
    "\011\001\002\000\010\002\ufffc\004\ufffc\005\ufffc\001\002" +
    "\000\026\002\ufffa\004\ufffa\005\ufffa\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002\000\010" +
    "\002\ufffd\004\ufffd\005\ufffd\001\002\000\026\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\001\002\000\010\002\uffff\004\uffff\005" +
    "\011\001\002\000\026\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\001" +
    "\002\000\026\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\001\002\000" +
    "\014\006\026\007\025\010\015\013\020\014\024\001\002" +
    "\000\014\006\uffee\007\uffee\010\uffee\013\uffee\014\uffee\001" +
    "\002\000\020\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\001\002\000\014\006\026\007\025\010" +
    "\015\013\020\014\024\001\002\000\014\006\026\007\025" +
    "\010\015\013\020\014\024\001\002\000\014\006\uffed\007" +
    "\uffed\010\uffed\013\uffed\014\uffed\001\002\000\014\006\uffef" +
    "\007\uffef\010\uffef\013\uffef\014\uffef\001\002\000\014\006" +
    "\uffec\007\uffec\010\uffec\013\uffec\014\uffec\001\002\000\026" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\001\002\000\026\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\001\002\000\026\002\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\001\002\000\026\002\ufffb\004\ufffb\005\ufffb" +
    "\006\026\007\025\010\015\011\022\012\017\013\020\014" +
    "\024\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\001" +
    "\002\000\026\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\001\002\000" +
    "\026\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\014\002\003\003\006\004\005\005\007\012" +
    "\004\001\001\000\002\001\001\000\010\006\015\007\022" +
    "\013\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\011\012\004\001\001\000\002" +
    "\001\001\000\010\003\013\005\007\012\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\031\001\001" +
    "\000\006\006\030\007\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\027\007\022\001\001\000\006" +
    "\006\026\007\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\032\007\022\010\034\013" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeneratedParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeneratedParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeneratedParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


    private Lexer lexer;

    public GeneratedParser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;

    }

    private ASTNode tree = null;
    private Boolean currentlyQuoted = false;

    public ASTNode getTree(){
        return tree;
    }

    public void syntax_error(java_cup.runtime.Symbol cur_token){
        throw new IllegalArgumentException();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GeneratedParser$actions {
  private final GeneratedParser parser;

  /** Constructor */
  CUP$GeneratedParser$actions(GeneratedParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GeneratedParser$do_action_part00000000(
    int                        CUP$GeneratedParser$act_num,
    java_cup.runtime.lr_parser CUP$GeneratedParser$parser,
    java.util.Stack            CUP$GeneratedParser$stack,
    int                        CUP$GeneratedParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeneratedParser$result;

      /* select the action based on the action number */
      switch (CUP$GeneratedParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // root ::= seq 
            {
              ASTNode RESULT =null;
		int sequencesleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int sequencesright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode sequences = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		 ASTNode rootNode = new ASTNode("root");
                    rootNode.addChild(sequences);
                    tree = rootNode;
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		RESULT = start_val;
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeneratedParser$parser.done_parsing();
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // seq ::= seq SEMI pipe 
            {
              ASTNode RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		ASTNode seq = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int pipeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int piperight = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode pipe = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  seq.addChild(pipe);
                    RESULT = seq;
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("seq",2, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seq ::= pipe 
            {
              ASTNode RESULT =null;
		int pipeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int piperight = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode pipe = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  RESULT = new ASTNode("seq");
                    RESULT.addChild(pipe);
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("seq",2, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pipe ::= pipe PIPE call 
            {
              ASTNode RESULT =null;
		int pipesleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int pipesright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		ASTNode pipes = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode call = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  pipes.addChild(call);
                    RESULT = pipes;
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("pipe",1, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pipe ::= call 
            {
              ASTNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode call = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  RESULT = new ASTNode("pipe");
                    RESULT.addChild(call);
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("pipe",1, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // call ::= redirections argument atoms 
            {
              ASTNode RESULT =null;
		int redirectionsleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int redirectionsright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		ASTNode redirections = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int wordleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		ASTNode word = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int atom_listleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int atom_listright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode atom_list = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  ASTNode keywordNode = new ASTNode("keyword");
                    keywordNode.addChild(word);
                    ASTNode output = new ASTNode("call");
                    if(redirections != null) {output.addChild(redirections);}
                    output.addChild(keywordNode);
                    if(atom_list != null) {output.addChild(atom_list);}
                    RESULT = output;
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("call",3, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // call ::= 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode("call"); 
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("call",3, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // redirections ::= redirections redirection 
            {
              ASTNode RESULT =null;
		int redirectListleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int redirectListright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		ASTNode redirectList = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int redirectionleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int redirectionright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode redirection = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		
                    if(redirectList == null){
                        redirectList = new ASTNode("redirection_list");
                    }
                    redirectList.addChild(redirection);
                    RESULT = redirectList;
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("redirections",8, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // redirections ::= 
            {
              ASTNode RESULT =null;

              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("redirections",8, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atoms ::= atoms atom 
            {
              ASTNode RESULT =null;
		int atomlistleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int atomlistright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		ASTNode atomlist = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode atom = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  if(atomlist == null){
                        atomlist = new ASTNode("atom_list");
                    }
                    atomlist.addChild(atom);
                    RESULT = atomlist;
                    
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("atoms",7, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atoms ::= 
            {
              ASTNode RESULT =null;

              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("atoms",7, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atom ::= redirection 
            {
              ASTNode RESULT =null;
		int redirectleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int redirectright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode redirect = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		 RESULT = redirect;
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("atom",6, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atom ::= argument 
            {
              ASTNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode arg = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		 RESULT = arg;
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("atom",6, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // redirection ::= GREATER argument 
            {
              ASTNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode arg = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		
                    RESULT = new ASTNode("redirect");
                    RESULT.setRedirectType("OUT");
                    RESULT.addChild(arg);
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("redirection",9, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // redirection ::= LESSER argument 
            {
              ASTNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode arg = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  RESULT = new ASTNode("redirect");
                    RESULT.setRedirectType("IN");
                    RESULT.addChild(arg);
                 
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("redirection",9, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argument ::= argument_atom argument 
            {
              ASTNode RESULT =null;
		int arg_atomleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int arg_atomright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		ASTNode arg_atom = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		ASTNode arg = (ASTNode)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  if(arg_atom != null){
                        arg.addChildFront(arg_atom);
                    }
                    RESULT = arg;
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("argument",4, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argument ::= ATOMEND 
            {
              ASTNode RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		String content = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  RESULT = new ASTNode("argument");
                    if(currentlyQuoted){
                        RESULT.setQuoted(true);
                        currentlyQuoted = false;
                    }
                    RESULT.addChild(new ASTNode(content, "atom"));
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("argument",4, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argument_atom ::= ATOM 
            {
              ASTNode RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		String content = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  RESULT = new ASTNode(content, "atom");
                 
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("argument_atom",5, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argument_atom ::= SQUOTE 
            {
              ASTNode RESULT =null;
		 currentlyQuoted = true; 
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("argument_atom",5, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument_atom ::= DQUOTE 
            {
              ASTNode RESULT =null;
		 currentlyQuoted = true; 
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("argument_atom",5, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argument_atom ::= BACKQUOTE 
            {
              ASTNode RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()).right;
		String content = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.peek()).value;
		  RESULT = new ASTNode(content, "backquote");
                    RESULT.setQuoted(true);
                
              CUP$GeneratedParser$result = parser.getSymbolFactory().newSymbol("argument_atom",5, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.peek()), RESULT);
            }
          return CUP$GeneratedParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GeneratedParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GeneratedParser$do_action(
    int                        CUP$GeneratedParser$act_num,
    java_cup.runtime.lr_parser CUP$GeneratedParser$parser,
    java.util.Stack            CUP$GeneratedParser$stack,
    int                        CUP$GeneratedParser$top)
    throws java.lang.Exception
    {
              return CUP$GeneratedParser$do_action_part00000000(
                               CUP$GeneratedParser$act_num,
                               CUP$GeneratedParser$parser,
                               CUP$GeneratedParser$stack,
                               CUP$GeneratedParser$top);
    }
}

}
